/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from "util";
import Ajv, { ValidateFunction } from "ajv";
import addFormats from "ajv-formats";
import schema from "ajv/dist/refs/json-schema-draft-06.json";
import { Payload } from "./createApiKey";
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  useDefaults: true,
});

ajv.addMetaSchema(schema);
addFormats(ajv);

export type { Payload };
export const PayloadSchema = {
  $schema: "http://json-schema.org/draft-07/schema#",
  definitions: {
    Env: {
      enum: ["development", "production"],
      type: "string",
    },
  },
  properties: {
    appId: {
      type: "string",
    },
    env: {
      $ref: "#/definitions/Env",
    },
    expiredAt: {
      description: "Enables basic storage and retrieval of dates and times.",
      format: "date-time",
      type: "string",
    },
    issuedAt: {
      description: "Enables basic storage and retrieval of dates and times.",
      format: "date-time",
      type: "string",
    },
    serviceName: {
      type: "string",
    },
    projectId: {
      type: "string",
    },
  },
  required: ["appId", "env", "expiredAt", "issuedAt", "serviceName"],
  type: "object",
};
export type ValidateFn<T> = ((data: unknown) => data is T) &
  Pick<ValidateFunction, "errors">;
export const isPayload = ajv.compile(PayloadSchema) as ValidateFn<Payload>;
export default function validate(value: string): Payload {
  const payload = JSON.parse(value);
  if (isPayload(payload)) {
    return payload;
  } else {
    throw new Error(
      ajv.errorsText(
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        isPayload.errors!.filter((e: any) => e.keyword !== "if"),
        { dataVar: "Payload" }
      ) +
        "\n\n" +
        inspect(payload)
    );
  }
}
